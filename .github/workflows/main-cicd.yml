#==============================================================================
# CI/CD github pipline script: 
#   - build
#   - publish docker image to DockerHub
#   - redeploy latest image to k8s cluster
#
# This script to work requires the following secrets to be defined:
# - DOCKER_USERNAME : 
# - DOCKER_PASSWORD : 
# - KUBE_SERVER
# - KUBE_TOKEN
#
# (c) Agency04 / Domagoj Madunić
#==============================================================================
name: GeodataApp CI/CD
on: 
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
    validation:
        name: "Gradle Wrapper Validation"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: gradle/wrapper-validation-action@v1
    pipeline:
        name: CI/CD pipeline
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
        timeout-minutes: 20
        env:
            NODE_VERSION: 16.13.0
            SPRING_OUTPUT_ANSI_ENABLED: DETECT
            SPRING_JPA_SHOW_SQL: false
            JHI_DISABLE_WEBPACK_LOGS: true
            IMAGE_NAME: docker-registry-main/geodata-app
            DEPLOYMENT_NAME: geodata-app-deployment
            #KUBE_SERVER: https://740e865b-b00f-4e42-970f-67c87c1c634d.k8s.ondigitalocean.com
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                  node-version: 16.13.0
            - uses: actions/setup-java@v1
              with:
                  java-version: '11.x'
            # Setup gcloud CLI (TFC GCR project)
            - uses: google-github-actions/setup-gcloud@v0.2.0
              with:
                service_account_key: ${{ secrets.GAR_SA_KEY }}
                project_id: 'ag04-inventory'
            # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
            - run: |-
                gcloud --quiet auth configure-docker eu.gcr.io
            - name: Install node.js packages
              id: install-node-js
              run: npm install
            - name: Run backend test
              id: backend-tests
              run: |
                  chmod +x gradlew
                  ./gradlew clean test integrationTest
            - name: Run frontend test
              id: frontend-tests
              run: npm run test
            # Build the Docker image (latest)
            - name: Build docker image (latest)
              run: |-
                ./gradlew jib -PimageVersion=latest -Pprod -PimageName=$IMAGE_NAME -PdockerRegistryUrl=eu.gcr.io/ag04-inventory
            #- name: Package application
            #  id: package-app
            #  if: github.event_name == 'push' || github.event.pull_request.merged == 'true'
            #  run: ./gradlew bootJar -Pprod -x test -x integrationTest
            #- name: Build and publish docker image (latest)
            #  id: docker-build-push-latest
            #  if: github.event_name == 'push' || github.event.pull_request.merged == 'true'
            #  run: |
            #      ./gradlew jib -PimageVersion=latest -Djib.to.auth.username="${{ secrets.DOCKER_USERNAME }}" -Djib.to.auth.password="${{ secrets.DOCKER_PASSWORD }}" -Pprod
            #- name: Tagg check
            #  if: startsWith(github.ref, 'refs/tags/')
            #  run: echo "Detected tag ${{ github.ref }}"
            #- name: Build and publish docker image (release)
            #  id: docker-build-push-release
            #  if: (github.event_name == 'push' || github.event.pull_request.merged == 'true') && startsWith(github.ref, 'refs/tags/')
            #  run: |
            #      ./gradlew jib -Djib.to.auth.username="${{ secrets.DOCKER_USERNAME }}" -Djib.to.auth.password="${{ secrets.DOCKER_PASSWORD }}" -Pprod
#            - name: Install kubectl
#              id: install-kubectl
#              if: github.event_name == 'push' || github.event.pull_request.merged == 'true'
#              run: |
#                  sudo apt-get install kubectl
#            - name: Deploy to (dev) k8s cluster
#              id: deploy-k8s-cluster-dev
#              if: github.event_name == 'push' || github.event.pull_request.merged == 'true'
#              run: |
#                  kubectl rollout restart deployment $DEPLOYMENT_NAME --insecure-skip-tls-verify=true --server=$KUBE_SERVER --token="${{ secrets.KUBE_TOKEN }}"
      